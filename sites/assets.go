// Code generated by bindata. DO NOT EDIT.
// sources:
// sites/assets.go
// sites/cityapartment.yml

package sites

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataSitesAssetsgo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func gzipBindataSitesAssetsgo() (*gzipAsset, error) {
	bytes := _gzipBindataSitesAssetsgo
	info := gzipBindataFileInfo{
		name:        "sites/assets.go",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1591385866, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataSitesCityapartmentyml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5d\xab\xe3\x36\x10\x7d\xd7\xaf\x18\x72\x1f\xba\x17\xea\xc4\xb9" +
		"\x5b\xfa\xa0\x87\x42\xd9\xb2\x50\x28\x14\x7a\xdb\xa7\x4b\x08\x63\x7b\x62\x4f\x23\x4b\x62\x34\xce\x47\x7f\x7d\x91" +
		"\xec\xcd\xde\x6e\xb6\x5b\x28\xfb\xa2\x64\x8e\xce\x7c\xe8\xcc\x8c\xab\xaa\x32\x1e\x47\xb2\xd0\xb2\x5e\x31\xa2\xe8" +
		"\x48\x5e\xd7\xdd\xd1\x24\xd6\x4f\x61\xd3\x51\x6a\x85\xa3\x72\xf0\x16\x56\x3f\x91\x1f\x51\x8e\x20\xe4\x15\x1d\xb0" +
		"\xef\xe8\x02\xd9\x6d\x65\xf4\x1a\xc9\x42\x14\x3e\xa1\x92\x71\xe8\xfb\x09\x7b\xb2\x40\xbe\xfa\xe3\xd9\x08\x2a\x39" +
		"\x1e\x59\x2d\x6c\x6b\x63\x12\xa9\xb2\xef\x93\x35\x00\x15\x38\x6c\xc8\x59\x78\x17\xc2\x91\xc9\x00\x00\x2c\x05\x7e" +
		"\x04\xe6\xe8\x4a\x17\x35\xe6\xe1\x17\xf6\xc7\x04\x3a\xa0\x42\x8b\x1e\x1a\x82\x29\x51\xf7\x2d\xb0\x87\x16\x13\xc1" +
		"\x99\x60\xc0\x13\xc1\xc8\x22\x41\xd2\xda\xb8\xec\x30\xe7\x1a\x54\x63\xb2\x9b\xcd\xdd\xe3\xcd\xc3\x7b\x42\x9d\x84" +
		"\x12\x9c\xe9\x1b\x21\x48\x53\x8c\x41\x72\x99\xa6\xc5\x58\xdc\x5b\x54\xea\x83\x30\x15\x0b\x16\x19\x2c\xfc\x56\x7e" +
		"\x8d\x79\xf8\x75\x12\x48\x84\xd2\x0e\x90\xda\x81\x46\x32\xb3\x95\xe9\x23\x5e\x22\xf6\x94\x2c\x3c\xd5\xd9\x24\x1d" +
		"\x42\x67\x21\x86\xa4\x06\xa0\x5c\xf1\x5f\x64\xe1\x6d\x5d\x4c\x1d\x2c\x6c\xce\xb1\xc2\x6e\x64\xbf\x29\x67\x85\x7f" +
		"\xe2\x65\x1d\x87\x68\x00\x0e\xc1\xb9\x70\x16\xea\x58\xa8\x55\x0b\x2a\x13\x19\x03\xf0\xf0\xb3\x8f\x93\x02\x4a\x3f" +
		"\xe5\x97\x25\x03\xc0\x19\x59\x2a\xc6\x76\xee\x64\x8e\xb4\x3f\xb0\x53\x92\xfd\x4d\x86\x54\x28\x1d\x2a\xbe\x44\xe1" +
		"\x96\x76\x2f\x23\xfb\x9d\x85\xfa\x1e\xc7\xcb\xce\xc2\xf6\xbb\xba\x7e\x75\x97\xcb\xff\x8c\xcb\x02\xcf\x1e\x0b\x3f" +
		"\xbf\xb6\xb3\xb0\x9d\x8d\x90\x74\x3f\x37\xb8\x09\x8e\xfb\x02\x06\xe9\x48\x5e\xca\xd9\x5c\x77\x16\x6e\x45\xee\xb3" +
		"\xe8\x9f\x52\xb2\xf7\xce\xc2\x8f\xcf\xef\x6e\x11\xd3\x3e\x92\xec\x63\x99\xc1\xb7\x75\x91\xe6\x79\xee\x8c\x50\x9a" +
		"\x9c\x02\xf9\x69\x24\x41\x0d\x62\x00\x24\x9c\x17\x85\x12\x39\x6a\x35\x88\x85\x15\xae\x6f\x59\x2b\x25\x4c\x24\xab" +
		"\x12\xe7\xf7\x81\xe0\xc0\xe4\xba\x04\xe1\x00\xe8\x81\xbc\xb2\x5e\xdf\xa4\xd7\xf1\x1f\x73\x93\x0a\x69\x8e\xab\xac" +
		"\x8e\xe6\xbf\xaf\x93\xac\xd9\x1f\x42\x75\x16\x8c\x91\xa4\x3a\x84\xa0\x24\xb0\x96\x70\xb6\x5e\x87\xaa\x1d\xd8\x75" +
		"\x6f\xb6\x8f\xc5\x6d\x99\xbe\xeb\x87\x20\x79\x1b\xec\x32\x83\x05\x6a\xd0\x7b\x92\xfb\x1c\x3c\xf6\x6b\x54\xc5\x76" +
		"\x28\x4f\xc9\xea\x54\x51\xe8\xc4\x74\x5e\xb8\xa8\x2a\xdc\x4c\x79\xfd\x93\xb4\xb3\x0e\x79\x18\xef\xcb\xfd\xa8\x48" +
		"\x26\x2c\x05\x2f\xb4\x79\x9e\xd2\x07\xaf\xbc\x6e\xf3\x22\xfb\x69\x6c\x16\x56\x5e\x45\x7b\x9f\x75\x10\x3a\x14\x94" +
		"\xbb\x2f\xdd\x96\xf1\xfb\x7f\x22\x3e\x3d\xfe\xd0\xf1\xe9\x1f\x00\x24\x95\xe0\xfb\x7b\xa5\xf1\x84\xec\xb0\x71\xf4" +
		"\x5e\xc2\xf8\x95\xd2\x6d\xff\x3d\xdd\x17\x94\xeb\x50\x29\xa2\x24\xba\xdd\x40\xde\xed\x64\x61\x55\x3f\x6d\xea\xed" +
		"\xe6\xa9\xae\xbf\x5f\x2d\x1f\xa3\x44\x72\xa2\xee\x33\xf5\x0a\x37\x4d\xf0\x95\xa3\x83\xfe\x57\xc2\x26\x04\xf7\x77" +
		"\x00\x00\x00\xff\xff\xde\x5d\xed\x5b\x23\x06\x00\x00")

func gzipBindataSitesCityapartmentyml() (*gzipAsset, error) {
	bytes := _gzipBindataSitesCityapartmentyml
	info := gzipBindataFileInfo{
		name:        "sites/cityapartment.yml",
		size:        1571,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1591372665, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"sites/assets.go":         gzipBindataSitesAssetsgo,
	"sites/cityapartment.yml": gzipBindataSitesCityapartmentyml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"sites": {Func: nil, Children: map[string]*gzipBintree{
		"assets.go":         {Func: gzipBindataSitesAssetsgo, Children: map[string]*gzipBintree{}},
		"cityapartment.yml": {Func: gzipBindataSitesCityapartmentyml, Children: map[string]*gzipBintree{}},
	}},
}}
